#!/usr/bin/python2.7
# -*-coding:Utf-8 -*

#We have to do later: 

#We have to do later: 
#find why the descriptor's reading is so slow
#make the optional argument of the command line know as "n" work only with "--all" command


#The followings modules are about the network.
import urllib
import urllib2
import io
import pycurl

import stem.process
import signal
from stem.util import term
import stem.socket
import stem.connection
#import stem.Signal

#The following modules goal is to save the variable wich contain all the page in a file to work with it.
import pickle
import os
import string

#The followings modules is for use the programm in command line.
import sys
import argparse
#import signal
import optparse

#list the avaible circuit withe the followings modules:
from stem import CircStatus
from stem.control import Controller


from stem.descriptor.remote import DescriptorDownloader

SOCKS_PORT = 7000
exit_nodes_list = []


def print_bootstrap_lines(line):
    #Color the text in blue
    if "Bootstrapped " in line:
        print(term.format(line, term.Color.BLUE))

def query(url):
    """
    Uses pycurl to fetch a site using the proxy on the SOCKS_PORT.
    """
    output = io.BytesIO()

    query = pycurl.Curl()
    query.setopt(pycurl.URL, url)

    query.setopt(pycurl.PROXY, 'localhost')
    query.setopt(pycurl.PROXYPORT, SOCKS_PORT)
    query.setopt(pycurl.PROXYTYPE, pycurl.PROXYTYPE_SOCKS5_HOSTNAME)
    query.setopt(pycurl.WRITEFUNCTION, output.write)


    try:
        query.perform()
        return output.getvalue()
    except pycurl.error as exc:
        return "Unable to reach %s (%s)" % (url, exc)
   
def update():
    """update

    make a file with every current fingerprints."""

    print("Updating the exit_nodes...")
    downloader = DescriptorDownloader()
    try:
        i = 0
        for desc in downloader.get_consensus().run():
            if desc.exit_policy.is_exiting_allowed():
                exit_nodes_list.append("{0}".format(desc.fingerprint))
                print("relay {0} found from {1}".format(desc.fingerprint, desc.nickname))            
                i += 1
            with open("disponible tor exit nodes list", "wb") as reader:
                 my_pickle = pickle.Pickler(reader)
                 my_pickle.dump(exit_nodes_list)
    except Exception as exc:
        print("Unable to retrieve the consensus: %s" % exc)
    else:
        print("update finished!")
    return None

def read_a_list(my_list):
    print("List loaded. Reading it.")
    for i in range(len(my_list)):
        print(my_list[i])

def load(file_road):
    with open(file_road, "rb") as reader:
        my_pickle = pickle.Unpickler(reader)
        element = my_pickle.load()
    return element

def circuit_running(url, fingerprint, limitation, incrementation, click_now):
    print("Configuration choosen with exit node: ${0}...".format(fingerprint))
    config = {'SocksPort': str(SOCKS_PORT), 'ExitNodes': '${0}'.format(fingerprint)}
    print("Running a tor process...")
    tor_process = stem.process.launch_tor_with_config(config, init_msg_handler = print_bootstrap_lines)
    print("Trying to send a query...")    
    query(url)		
    print("Tor process killed")
    tor_process.kill()
    print("Query successfully sent! Victory! We have already sent {0} queries on {1} with {2} attemps. But for the moment, let close tor process.".format(click_now + 1, limitation, incrementation + 1))


action = sys.argv[0]
parser = argparse.ArgumentParser(description="Make a bot click in the same +1 bottom over differents exit nodes to cheat the IP filtartion.")
parser.add_argument("u", type=str, help = "The url of the webpage where the differents request will be sent.")
parser.add_argument("-u", "--update", action="store_true", help="This action permittes to update the tor exit node fingerprint list not to waste time downloading the fingerprint list of course over tor network and work on a file to exctract it.")
parser.add_argument("-c", "--circuit", type=int, dest="loops", help="Permit to the user to choose the number of request. For a usage example in case of +1 robot, the user should be able to choose the +1 he will send or do some experimentations.")




parser.add_argument("-a", "--all", action="store_true", help="This action or more like this option actually, permittes to the user to use every connected and online exit nodes.")

args = parser.parse_args()
url_targetted = args.u

        
#if the user checks --update, fingerprint list is saved from the official tor website.
if args.update:    
    update()

tor_exit_nodes_fingerprint_list = load("disponible tor exit nodes list")
read_a_list(tor_exit_nodes_fingerprint_list)

#If the user choose the number of circuits...
if args.loops:
    """Let the user choose the number of request he wants to choose."""
    #The programme taks the argument know as [n] write by the user.
    automatical_request_number = args.loops
    error = 0
    i = 0
    click = 0
    while click < automatical_request_number and error < 3:
        try:
            circuit_running(url_targetted, tor_exit_nodes_fingerprint_list[i], automatical_request_number, i, click)
        except:
            print("Node disconnected. Go to the next.")
            error += 1
            pass
        else:
            click += 1
        finally: 
            i += 1
#If the user chooses to pass over every visible tor exit node...
elif args.all:
    #Send a query over every know exit nodes.
    error = 0
    click = 0
    for i in range(len(tor_exit_nodes_fingerprint_list)):
        try:
            circuit_running(url_targetted, tor_exit_nodes_fingerprint_list[i], len(tor_exit_nodes_fingerprint_list), i, click)
        except:
            print("Node disconnected. Go to the next.")
            error += 1
            pass
        else:
            click += 1
        finally:
            i += 1
        if error > 3 or error == 3:
            print("Three errors or more occured during this session. That may be a error due to an existing tor process. Check it and kill it if necessary.")
            break
